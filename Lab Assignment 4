Best Selling Product.


import pandas as pd

# Prompt the user for the file name
file_name = input()

# Load the data
df = pd.read_csv(file_name)


# Find the product with the highest total quantity sold
best_product =df.groupby('Product')['Quantity'].sum().idxmax()
highest_quantity =df.groupby('Product')['Quantity'].sum().max()

# Display the result
print(f"Best selling product: {best_product}")
print(f"Total quantity sold: {highest_quantity}")


City that Solds the Most Product.


import pandas as pd



# Prompt the user for the file name

file_name = input()



# Load the data

df = pd.read_csv(file_name)



# write the code..

best_city=df.groupby('City')['Quantity'].sum().idxmax()

# Display the result

print(f"City sold the most products: {best_city}")


Month with the Higest Total Sales.




# Prompt the user for the file name
file_name = input()

# Load the data
df = pd.read_csv(file_name)
df['sales']=df['Quantity'].multiply(df['Price'])
df['month']=pd.to_datetime(df['Date']).dt.strftime("%Y-%m")
# Find the month with the highest total sales
best_month =df.groupby('month')['sales'].sum().idxmax()
highest_sales = df['sales'].sum()

print(f"Best month: {best_month}")
print(f"Total sales: ${highest_sales:.2f}")


Most Frequently Sold Product Pairs.



import pandas as pd
from itertools import combinations
from collections import Counter

# Prompt user to input the file name
file_name = input()

# Read data from the specified CSV file
df = pd.read_csv(file_name)

# write the code
date_products = {}

# Group products by date
for date, group in df.groupby('Date'):
    products = group['Product'].unique()
    if len(products) > 1:
        date_products[date] = products

# Count product pairs
pair_counter = Counter()

for products in date_products.values():
    # Sort to avoid duplicate pairs like (A,B) and (B,A)
    pairs = combinations(sorted(products), 2)
    pair_counter.update(pairs)

# Find the maximum frequency
if pair_counter:
    max_count = max(pair_counter.values())

    # Output the most frequent product pairs
    for pair, count in pair_counter.items():
        if count == max_count:
            print(f"{pair[0]} and {pair[1]}: {count} times")
else:
    print("No product pairs found.")


Titanic -3





import pandas as pd

import numpy as np



# Load the Titanic dataset

data = pd.read_csv('Titanic-Dataset.csv')

data['FamilySize'] = data['SibSp'] + data['Parch']

data['IsAlone'] = np.where(data['FamilySize'] > 0, 0, 1)

data = pd.get_dummies(data, columns=['Embarked'], drop_first=True)



# 1. Calculate the survival rate by class

print(data.groupby('Pclass')['Survived'].mean())



# 2. Calculate the survival rate by embarked location

print(data.groupby('Embarked_S')['Survived'].mean())



# 3. Calculate the survival rate by family size

print(data.groupby('FamilySize')['Survived'].mean())



# 4. Calculate the survival rate by being alone

print(data.groupby('IsAlone')['Survived'].mean())



# 5. Get the average fare by class

print(data.groupby('Pclass')['Fare'].mean())



# 6. Get the average age by class

print(data.groupby('Pclass')['Age'].mean())



# 7. Get the average age by survival status

print(data.groupby('Survived')['Age'].mean())



# 8. Get the average fare by survival status

print(data.groupby('Survived')['Fare'].mean())



# 9. Get the number of survivors by class

print(data[data['Survived']==1]['Pclass'].value_counts())



# 10. Get the number of non-survivors by class

print(data[data['Survived']==0]['Pclass'].value_counts())


Titanic Dataset Analysis and Data Cleaning.







import pandas as pd

import numpy as np



# Load the Titanic dataset

data = pd.read_csv('Titanic-Dataset.csv')



# 1. Display the first 5 rows of the dataset

print(data.head())



# 2. Display the last 5 rows of the dataset

print(data.tail())



# 3. Get the shape of the dataset

print(data.shape)



# 4. Get a summary of the dataset (info)

print(data.info())



# 5. Get basic statistics of the dataset

print(data.describe())



# 6. Check for missing values

print(data.isnull().sum())



# 7. Fill missing values in the ‘Age’ column with the median age

median_age=data['Age'].median()

data['Age'].fillna(median_age, inplace=True)



# 8. Fill missing values in the ‘Embarked’ column with the mode

mode_embarked=data['Embarked'].mode()[0]

data['Embarked'].fillna(mode_embarked, inplace=True)



# 9. Drop the ‘Cabin’ column due to many missing values

data.drop('Cabin',axis=1, inplace=True)



# 10. Create a new column 'FamilySize’ by adding ‘SibSp' and ‘Parch'

data['FamilySize'] = data['SibSp'] + data['Parch']


Titanic Dataset Analysis and Data Cleaning -2.





import pandas as pd

import numpy as np



# Load the Titanic dataset

data = pd.read_csv('Titanic-Dataset.csv')

data['FamilySize'] = data['SibSp'] + data['Parch']

data['IsAlone'] = np.where(data['FamilySize'] == 0, 1, 0)



# 2. Convert ‘Sex' to numeric (male: 0, female: 1)

data['Sex'] = data['Sex'].map({'male': 0, 'female': 1})



# 3. One-hot encode the ‘Embarked' column, dropping the first category

data = pd.get_dummies(data, columns=['Embarked'], drop_first=True)



# 4. Get the mean age of passengers

mean_age = data['Age'].mean()

print(mean_age)



# 5. Get the median fare of passengers

median_fare = data['Fare'].median()

print(median_fare)



# 6. Get the number of passengers by class

passengers_by_class = data['Pclass'].value_counts()

print(passengers_by_class)



# 7. Get the number of passengers by gender

passengers_by_gender = data['Sex'].value_counts().sort_index()

print(passengers_by_gender)



# 8. Get the number of passengers by survival status

passengers_by_survival = data['Survived'].value_counts().sort_index()

print(passengers_by_survival)



# 9. Calculate the survival rate

survival_rate = data['Survived'].mean()

print(survival_rate)



# 10. Calculate the survival rate by gender

survival_rate_by_gender = data.groupby('Sex')['Survived'].mean()

print(survival_rate_by_gender) 

Titanic-4.





import pandas as pd

import numpy as np



# Load the Titanic dataset

data = pd.read_csv('Titanic-Dataset.csv')

data = pd.get_dummies(data, columns=['Embarked'], drop_first=True)





survivors_by_gender = data[data['Survived'] == 1]['Sex'].value_counts()

print(survivors_by_gender)



non_survivors_by_gender = data[data['Survived'] == 0]['Sex'].value_counts()

print(non_survivors_by_gender)





survivors_by_embarked_s= data[data['Survived'] == 1]['Embarked_S'].value_counts()

print(survivors_by_embarked_s)





non_survivors_by_embarked_s= data[data['Survived'] == 0]['Embarked_S'].value_counts()

print(non_survivors_by_embarked_s)



children = data [data['Age'] < 18]

children_survival_rate = children['Survived'].mean()

print(children_survival_rate)



adults = data[data['Age'] >= 18]

adults_survival_rate = adults['Survived'].mean()

print(adults_survival_rate)



median_age_survivors = data[data['Survived'] == 1]['Age'].median()

print(median_age_survivors)



median_age_non_survivors = data[data['Survived'] == 0]['Age'].median()

print(median_age_non_survivors)



median_fare_survivors = data[data['Survived'] == 1] ['Fare'].median()

print(median_fare_survivors)





median_fare_non_survivors = data[data['Survived'] == 0] ['Fare'].median()

print(median_fare_non_survivors)
